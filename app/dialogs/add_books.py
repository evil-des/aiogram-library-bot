from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import SwitchTo, Cancel
from aiogram_dialog.widgets.kbd import (
    Button, Group, Row, ScrollingGroup, Select, Back
)
from aiogram_dialog.widgets.input import (
    TextInput, MessageInput, ManagedTextInput
)
from app.windows.listing import GenresWindow
from app.dialogs.common import CommonElements
from aiogram_dialog import Dialog, Window, DialogManager
from app.states.book import BookAdding
from app.services.repo import Repo
from app.models import Genre, Book
from aiogram.types import CallbackQuery, Message
from aiogram_dialog.widgets.text import Jinja


def author_name_input_checker(text: str):
    if all(x.isspace() or x.isalpha() for x in text):
        return text
    raise ValueError


async def on_author_input_error(message: Message, *args) -> None:
    await message.answer("–û—à–∏–±–∫–∞: –≤ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã")


async def on_name_success(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        *args
) -> None:
    dialog_manager.dialog_data.update(name=widget.get_value())
    await dialog_manager.next()


async def on_author_name_success(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        *args
) -> None:
    dialog_manager.dialog_data.update(author=widget.get_value())
    await dialog_manager.next()


async def on_desc_success(
        message: Message,
        widget: ManagedTextInput,
        dialog_manager: DialogManager,
        *args
) -> None:
    dialog_manager.dialog_data.update(desc=widget.get_value())
    await dialog_manager.next()


async def get_book_data(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data
    repo: Repo = dialog_manager.middleware_data["repo"]
    genre: Genre = await repo.genre_dao.get_genre(
        data.get("genres_obj_id")
    )
    name = data.get("name").capitalize()
    author = " ".join([word.capitalize() for word in data.get("author").split()])

    if "desc" in data:
        desc = data.get("desc")
    else:
        desc = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    data.update(name=name, author=author)
    return {
        "name": name,
        "genre": genre,
        "author": author,
        "desc": desc,
    }


async def add_book(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager,
) -> None:
    await callback.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ... –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    repo: Repo = dialog_manager.middleware_data["repo"]
    data = dialog_manager.dialog_data

    author = await repo.author_dao.create_author_if_not_exist(
        data.get("author")
    )

    book = Book(
        name=data.get("name"),
        desc=data.get("desc"),
        genre_id=data.get("genres_obj_id"),
        author_id=author.id,
    )

    await repo.user_dao.add_book(
        callback.from_user.id,
        book
    )

    await dialog_manager.done()
    await callback.message.answer("–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üëç")


dialog = Dialog(
    Window(
        Const("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥!\n\n"
              "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>"),
        Row(
            SwitchTo(
                text=Const("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
                id="show_genres",
                state=BookAdding.set_genre
            ),
            Cancel(Const("–û—Ç–º–µ–Ω–∞"), on_click=CommonElements.on_cancel_click),
        ),
        state=BookAdding.show_menu,
    ),
    GenresWindow(
        state=BookAdding.set_genre
    ),
    CommonElements.input(
        id="book_name",
        text=Const("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:"),
        state=BookAdding.set_name,
        on_success=on_name_success
    ),
    CommonElements.input(
        id="author_name",
        text=Const("–£–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ (–Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–∞ –∏ –±—É–∫–≤):"),
        state=BookAdding.set_author,
        type_factory=author_name_input_checker,
        on_success=on_author_name_success,
        on_error=on_author_input_error
    ),
    CommonElements.input(
        id="author_name",
        text=Const("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –ª–∏–±–æ <b>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ</b> —ç—Ç–æ—Ç —à–∞–≥:"),
        state=BookAdding.set_desc,
        on_success=on_desc_success,
        skip=True
    ),
    Window(
        Jinja(
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{{ name }}</b>\n"
            "–ñ–∞–Ω—Ä: <b>{{ genre.name }}</b>\n"
            "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: <b>{{ author }}</b>\n\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ:\n<i>{{ desc }}</i>\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            "üìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É"
        ),
        Row(
          Button(Const("–î–æ–±–∞–≤–∏—Ç—å"), id="add_book", on_click=add_book),
          Button(Const("–û—Ç–º–µ–Ω–∏—Ç—å"), id="cancel", on_click=CommonElements.on_cancel_click),
        ),
        getter=get_book_data,
        state=BookAdding.confirm
    )
)
