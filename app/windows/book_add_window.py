from aiogram.fsm.state import State
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, StartMode, Window
from aiogram_dialog.widgets.kbd import Button, Row
from aiogram_dialog.widgets.text import Jinja

from app.dialogs.common import CommonElements
from app.models import Book, BookAdd
from app.services.repo import Repo
from app.states.book import BookListing


class BookAddWindow(Window):
    def __init__(self, state: State) -> None:
        super().__init__(
            self.get_detailed_book_info(),
            self.get_book_add_keyboard(self.add_book),
            getter=self.get_book_data,
            state=state,
        )

    @staticmethod
    async def get_book_data(dialog_manager: DialogManager, **kwargs):
        book_add: BookAdd = dialog_manager.dialog_data.get("book_add")
        book_add.name = book_add.name.capitalize()
        book_add.author = " ".join(
            [word.capitalize() for word in book_add.author.split()]
        )

        return {
            "name": book_add.name,
            "genre": book_add.genre,
            "author": book_add.author,
            "desc": book_add.desc,
        }

    @staticmethod
    def get_book_add_keyboard(on_add_click):
        return Row(
            CommonElements.add_btn(on_add_click),
            CommonElements.cancel_btn(),
        )

    @staticmethod
    def get_detailed_book_info() -> Jinja:
        return Jinja(
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{{ name }}</b>\n"
            "–ñ–∞–Ω—Ä: <b>{{ genre }}</b>\n"
            "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: <b>{{ author }}</b>\n\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ:\n<i>{{ desc }}</i>\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            "üìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É"
        )

    @staticmethod
    async def add_book(
        callback: CallbackQuery,
        widget: Button,
        dialog_manager: DialogManager,
    ) -> None:
        # await callback.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ... –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        repo: Repo = dialog_manager.middleware_data["repo"]
        book_add: BookAdd = dialog_manager.dialog_data.get("book_add")

        author = await repo.author_dao.create_author_if_not_exist(book_add.author)

        book = Book(
            name=book_add.name,
            desc=book_add.desc,
            genre_id=book_add.genre_id,
            author=author,
        )
        await repo.user_dao.add_book(callback.from_user.id, book)

        await callback.answer("–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üëç")
        await dialog_manager.start(
            state=BookListing.all_books, mode=StartMode.RESET_STACK
        )
